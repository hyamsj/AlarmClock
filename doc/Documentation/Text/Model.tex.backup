\subsection{Class: Model}
Die Model Klasse ist für die Daten Zuständig. Sie hat eine Liste mit allen Remindern als Klassenvariable. Die Model Klasse ladet die gespeicherten Daten über den DataBaseAdapter.
Dies macht sie im Konstruktor. Die Methode addReminder(), getReminders(), removeReminder() und removeReminders() sind relativ selbsterklärend.

Die bindData() Methode ist ein bisschen interessanter. Da die reminders Liste eine ObservableList ist, kann man mit ihr ein Binding erstellen. Wir haben es so aufgebaut, dass sobald
sich irgendetwas in der Liste ändert, die Methode adapter.save(reminders) aufgerufen wird. So gehen die Reminders nicht verloren.

\begin{lstlisting}
reminders.addListener(Poller.getInstance()::onChanged);
\end{lstlisting}
Dieses Statement macht zwei Sachen. Poller.getInstance gibt einen Poller zurück. Das onChanged macht, dass wenn sic etwas in der Reminder Liste ändert, der Poller notifiziert wird.

Die redo() und undo() Methoden kann man die Letzte Aktion in der Liste rückgängig machen. Das GUI selbst hat diese Funktionalität noch nicht, aber die Methoden machen auch wirklich das, was sie sollen.


\subsection{Interface: DateBaseAdapter}
Das DataBaseAdapter Interface stellt 2 Methoden zur Verfügung, die save() und die load() Methode. Save verlangt als Parameter die Liste von Reminders die Abggespeichert werden
sollen.

\subsection{Class: BinaryDBAdapter}
Die BinaryDBAdapter Klasse implementiert das DataBaseAdapter Interface und Serialisiert die Binäre Datenbank unter dem Namen reminders.ser. Die load() Methode schaut zuerst ob die DB
überhaupt existiert. Wenn nicht, wird eine neue erstellt. Dies machen wir mittels einem ObjectInputStream. Das Object das gespeichert wird (die Liste der Reminders),
casten wir zu einer ArrayList, und diese ArrayListe wird dann in eine ReminderList gefüllt.
Die save() Methode wird immer aufgerufen, sobald sich irgendetwas in der Tabelle vom GUI ändert. Das Abspeichern machen wir mittels einem ObjectOutputStream.

\subsection{ReminderList}

Die ReminderList ist aus zwei Grüunden entstanden.
Wir hatten sehr häuffig eine Beobachtbare (Observable) Liste von Reminden als inputparameter in FUnktionen zu definieren. Dies verschlechtert die Leserlichkeit, welche bei Code sehr wichtig ist.
Durch das definieren einer eigenen Klasse, kann man nun das besser lesbare ReminderList schreiben.


Ausserdem bietet uns die ReminderList auch die Möglichkeit den Zustand der ReminderList  in einer History zu speichern, wenn man diese ändert.
Somit kann man Änderungen an der liste später rückgänig machen. Durch das Hinzufügen einer undoneHistory, kann man nun auf der Zeitachse in beide Richtungen navigieren.


Leider speilte das undo / redo nicht gut mit JavaFx zusammen, so dass Änderungen gar nicht im GUI übernommen werden. Die entsprechenden Buttons im GUI haben wir desshalbt wieder entfernt. Die Undo/Reod Funktionalität könnte aber in einem Nachfolgeprojekt Interessant werden.Desshalbe haben wir diese nicht  gelöscht.
\subsection{Specific Reminder}

Dies sind eine spezialiesierung der Superklasse Reminder. Der einzige Unterschied besteht darin, dass ``SpecifigReminder'' noch Tags speichern. Diese Tags können dann mit dn Filtern gefiltert werden.

\subsection{Poller}
Der Poller folgt dem Singelton Pattern. Er 	
