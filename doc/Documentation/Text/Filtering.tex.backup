\subsection{Architektur}
Wir wollten nach dm Objektorientierten Paradigma den einzelnen Klassen möglichst wenig wissen über die Internas von anderen Klassen zumuten.
Somit sollte der Reminder selber prüfen obe er eine bestimmte Bedinung erfüllt und eine Notification absenden soll, anstatt seine Innereine dem NotificationHandler zu offenbaren. 

Es drängte sich also auf dem Reminder eine Funtkiont zum testen zu übergeben. Ähnlich wie im Comand Pattern haben wir dies gelöst, indem wir Ein Objekt um die Funktion gewrappt haben. Anstatt execute() haben wir die funktion aber isTrue genannt, was ein gut lesbaren Quellcode mit den Tests erzeugt.
Wie zum Beispiel der Criteriatester IsThisYear welcher einen Remeinder darauf testet, ojb er in diesem Jahr ist und die Antwort als boolean zurück gibt.
\begin{lstlisting}
boolean isThisYear = IsThisYear.isTrue(reminder);
\end{lstlisting}
\subsection{ Higher Order Functions}
  Die Marketingabteilung von Oracle behauptet gerne Java seie auch Funktional. Higer Order Functions werden aber nicht wirklich unterstützt. 
  \url{https://en.wikipedia.org/wiki/Higher-order_function}
  Java unterstüzt leider keine ehcten Higher order functions. Man kann also nicht ohne weiteres eine Funktion als Inputparameter übergeben.
  Mittels Lambdas ist es lediglich möglich, eine Funktion ausführen zu lassen und den Rückgabewert als Inputparameter weiter zu verwenden. Dies erlaubt eine kompaktere Notation. Dies reicht uns aber nicht, da wir den Remindern eine Funktion übergeben möchten, mit welcher jeder Reminder selber testet ob er eine Notification absenden soll. 
  
  \subsection{echte Higher Order Functions in Java}
  Um dies zu erreichen haben wir eine Form von Higher Order Functions mit Objekten nachgebaut. 
  Ein CriteraTester ist ein Objekt, welches als Wrapper für eine Funtion dient. Anstelle dieser Funktion übergibt man nun diesen FunktionsWrapper als Inputparameter. Somit konnten wir Funktionen als Inputparameter mittels Objektorientierten prinzipien nachbauen.
  Man muss nun für jede Funktion ein Objekt erstellen, welches das Interface CriteraTester implementiert.Und die Filterfunktion isTrue implementieren.
  Funktionen als Rückgabewert kann man so aber noch nicht wirklich nachbauen. Für uns war das aber nicht nötig.
  
  Dank den oben erwähnten Lambdas kann man dies auch elegan on the Fly erledigen. Da es aber vorkommen kann dass man einen Filter mehrmals benutzt, habe wir uns entschieden die Filter jeweils als eigene Klassen zu implementieren.
  
  \subsection{Code Beispiel}
       \begin{lstlisting}[caption = on the fly criteria]
       Reminder reminder;
       Collection<CriteriaTester> criteria = new ArrayList<>();
        criteria.add(new IsPassed());
         //     example how CriteraTester can be written on the fly
        //pus this to documentation
        criteria.add(
                reminder -> (!reminder.getTags().contains("hidden"))
        );
        //This lets the Reminder send a notification if the Reminder meets the criterias 
        //The first criteia it must pass it th IsPassed()
        reminder.notifyIf(criteria);
       \end{lstlisting}
       
       
       \subsection{Implementierungen von Filtern}
       Wir haben ettliche Filter implementiert, die meisten Filter sind sehr ähnlich.
       
       \subsubsection{hasTag}
       Dieser Filter prüft, ob ein Reminder ein bestimmten Tag hat. Somit kann man zum Beispiel Reminders verstecken, wie im Beispiel weiter oben gezeigt,
       ode mann kann Filter auch in andere Kategorien anordnen. 
       
       Das Filtern auf den Tag geschieht auf einer einzelnen Zeile.
      \begin{lstlisting}
      @Override
       public boolean isTrue(Reminder reminder) {
	    return reminder.getTags().contains(tag);
      }
      \end{lstlisting}
      
      \subsubsection{IsInNextMin}
      Dieser Filter testet ob ein Reminde inerhalb der nächsten x Minuten stattfindet.
      Der default Constructor setzt x auf 1, so dass ohne nähere Spezifikaiton darauf getestet wird, ob ein Reminder in der nächsten Minute stattfindet.
      Dies kommt auch nahe an den natürlichen Sprachgebrauch, was den Code beser lesbar macht.
      
      \begin{lstlisting}
	@Override
        public boolean isTrue(Reminder reminder) {
        return reminder.getDate().isAfter(LocalDateTime.now())
                && reminder.getDate().isBefore(LocalDateTime.now().plusMinutes(nextMinutes));
    }
      \end{lstlisting}

      
 